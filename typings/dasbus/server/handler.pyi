"""
This type stub file was generated by pyright and updated for dasbus.server.handler.
"""

from abc import ABCMeta, abstractmethod
from typing import Any, Callable

log = ...
__all__ = ["GLibServer", "AbstractServerObjectHandler", "ServerObjectHandler"]

class GLibServer:
    """The low-level DBus server library based on GLib."""

    @classmethod
    def emit_signal(
        cls,
        connection: Any,
        object_path: str,
        interface_name: str,
        signal_name: str,
        parameters: Any,
        destination: str = ...,
    ) -> None: ...
    @classmethod
    def register_object(
        cls,
        connection: Any,
        object_path: str,
        object_xml: str,
        callback: Callable[..., Any],
        callback_args: tuple[Any, ...] = ...,
    ) -> Callable[[], None]: ...
    @classmethod
    def get_call_info(cls, invocation: Any) -> dict[str, Any]: ...
    @classmethod
    def set_call_error(
        cls,
        invocation: Any,
        error_name: str,
        error_message: str,
    ) -> None: ...
    @classmethod
    def set_call_reply(
        cls,
        invocation: Any,
        out_type: Any,
        out_value: Any,
    ) -> None: ...

class AbstractServerObjectHandler(metaclass=ABCMeta):
    """The abstract handler of a published object."""

    __slots__ = ("_message_bus", "_object_path", "_object", "_specification")

    def __init__(self, message_bus: Any, object_path: str, obj: Any) -> None: ...
    @property
    def specification(self) -> Any: ...
    @abstractmethod
    def connect_object(self) -> None: ...
    @abstractmethod
    def disconnect_object(self) -> None: ...

class ServerObjectHandler(AbstractServerObjectHandler):
    """The handler of an object published on DBus."""

    __slots__ = ("_server", "_signal_factory", "_error_mapper", "_registrations")

    def __init__(
        self,
        message_bus: Any,
        object_path: str,
        obj: Any,
        error_mapper: Any = ...,
        server: Any = ...,
        signal_factory: Any = ...,
    ) -> None: ...
    def connect_object(self) -> None: ...
    def disconnect_object(self) -> None: ...
