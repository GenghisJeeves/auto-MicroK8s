"""
This type stub file was generated by pyright and updated for dasbus.server.interface.
"""

from typing import Any, Callable

from dasbus.xml import XMLGenerator

__all__ = [
    "dbus_class",
    "dbus_interface",
    "dbus_signal",
    "get_xml",
    "accepts_additional_arguments",
    "are_additional_arguments_supported",
]

DBUS_XML_ATTRIBUTE: str
RETURNS_MULTIPLE_ARGUMENTS_ATTRIBUTE: str
ACCEPTS_ADDITIONAL_ARGUMENTS_ATTRIBUTE: str

def returns_multiple_arguments(method: Callable[..., Any]) -> Callable[..., Any]: ...
def accepts_additional_arguments(method: Callable[..., Any]) -> Callable[..., Any]: ...
def are_additional_arguments_supported(method: Callable[..., Any]) -> bool: ...

class dbus_signal:
    """DBus signal."""

    definition: Any
    factory: Any
    name: str | None

    def __init__(self, definition: Any = ..., factory: Any = ...) -> None: ...
    def __set_name__(self, owner: type, name: str) -> None: ...
    def __get__(self, instance: Any, owner: type) -> Any: ...
    def __set__(self, instance: Any, value: Any) -> None: ...

def dbus_interface(
    interface_name: str, namespace: tuple[str, ...] = ...
) -> Callable[[type], type]: ...
def dbus_class(cls: type) -> type: ...
def get_xml(obj: Any) -> str: ...

class DBusSpecificationGenerator(object):
    """Class for generating DBus XML specification."""

    xml_generator: type = XMLGenerator
    NAME_PATTERN: Any

    @classmethod
    def generate_specification(
        cls, interface_cls: type, interface_name: str = ...
    ) -> str: ...
