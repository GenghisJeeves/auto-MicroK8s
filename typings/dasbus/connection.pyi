"""
This type stub file was generated by pyright and updated for dasbus.connection.
"""

from abc import ABCMeta, abstractmethod
from typing import Any

log = ...
__all__ = [
    "GLibConnection",
    "MessageBus",
    "SystemMessageBus",
    "SessionMessageBus",
    "AddressedMessageBus",
]

class GLibConnection:
    """The low-level DBus connection library based on GLib."""

    DEFAULT_FLAGS: Any

    @staticmethod
    def get_system_bus_connection(cancellable: Any = ...) -> Any: ...
    @staticmethod
    def get_session_bus_connection(cancellable: Any = ...) -> Any: ...
    @staticmethod
    def get_addressed_bus_connection(
        bus_address: str,
        flags: Any = ...,
        observer: Any = ...,
        cancellable: Any = ...,
    ) -> Any: ...

class AbstractMessageBus(metaclass=ABCMeta):
    """Abstract representation of a message bus.

    The property connection represents a connection to the bus. You can
    register a service name with register_service, or publish an object
    with publish_object and get a proxy of a remote object with get_proxy.
    """

    @property
    @abstractmethod
    def connection(self) -> Any: ...
    def check_connection(self) -> bool: ...
    @abstractmethod
    def get_proxy(
        self,
        service_name: str,
        object_path: str,
        interface_name: str = ...,
        **kwargs: Any
    ) -> Any: ...
    @abstractmethod
    def register_service(self, service_name: str, **kwargs: Any) -> None: ...
    @abstractmethod
    def publish_object(self, object_path: str, obj: Any, **kwargs: Any) -> None: ...
    @abstractmethod
    def disconnect(self) -> None: ...

class MessageBus(AbstractMessageBus):
    """Representation of a message bus based on D-Bus."""

    def __init__(self, error_mapper: Any = ..., provider: Any = ...) -> None: ...
    @property
    def connection(self) -> Any: ...
    @property
    def proxy(self) -> Any: ...
    def get_proxy(
        self,
        service_name: str,
        object_path: str,
        interface_name: str = ...,
        proxy_factory: Any = ...,
        **proxy_arguments: Any
    ) -> Any: ...
    def register_service(self, service_name: str, **kwargs: Any) -> None: ...
    def publish_object(
        self,
        object_path: str,
        obj: Any,
        server_factory: Any = ...,
        **server_arguments: Any
    ) -> None: ...
    def unpublish_object(self, object_path: str) -> None: ...
    def unregister_service(self, object_path: str) -> None: ...
    def disconnect(self) -> None: ...

class SystemMessageBus(MessageBus):
    """Representation of a system bus connection."""

    def _get_connection(self) -> Any: ...
    # Inherits all methods from MessageBus

class SessionMessageBus(MessageBus):
    """Representation of a session bus connection."""

    def _get_connection(self) -> Any: ...
    # Inherits all methods from MessageBus

class AddressedMessageBus(MessageBus):
    """Representation of a connection for the specified address."""

    def __init__(self, address: str, *args: Any, **kwargs: Any) -> None: ...
    @property
    def address(self) -> str: ...
    def _get_connection(self) -> Any: ...
    # Inherits all methods from MessageBus
