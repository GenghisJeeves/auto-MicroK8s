"""
This type stub file was generated by pyright and updated for dasbus.typing.
"""

from typing import Any, Dict, List, NewType, Tuple

Variant = Any
VariantType = Any

__all__ = [
    "Bool",
    "Str",
    "Double",
    "Byte",
    "Int",
    "Int16",
    "UInt16",
    "Int32",
    "UInt32",
    "Int64",
    "UInt64",
    "UnixFD",
    "ObjPath",
    "Variant",
    "VariantType",
    "Tuple",
    "List",
    "Dict",
    "Structure",
    "get_native",
    "get_variant",
    "get_variant_type",
    "is_tuple_of_one",
    "unwrap_variant",
    "is_base_type",
    "get_type_arguments",
    "get_dbus_type",
    "VariantUnpacking",
    "VariantUnpacker",
    "VariantUnwrapper",
    "get_type_name",
]

Bool = bool
Double = float
Str = str
Int = int
Byte = NewType("Byte", int)
Int16 = NewType("Int16", int)
UInt16 = NewType("UInt16", int)
Int32 = NewType("Int32", int)
UInt32 = NewType("UInt32", int)
Int64 = NewType("Int64", int)
UInt64 = NewType("UInt64", int)
UnixFD = NewType("UnixFD", int)
ObjPath = NewType("ObjPath", str)
Structure = dict[Str, Variant]

def get_dbus_type(type_hint: Any) -> str: ...
def get_variant(type_hint: Any, value: Any) -> Variant: ...
def get_variant_type(type_hint: Any) -> VariantType: ...
def is_tuple_of_one(type_hint: Any) -> bool: ...
def get_native(value: Any) -> Any: ...
def unwrap_variant(variant: Any) -> Any: ...
def is_base_type(type_hint: Any, base_type: Any) -> bool: ...
def get_type_arguments(type_hint: Any) -> Any: ...
def get_type_name(type_hint: Any) -> str: ...

class DBusType(object):
    _basic_type_mapping: dict[Any, str]
    _container_type_mapping: dict[Any, str]

    @staticmethod
    def get_dbus_representation(type_hint: Any) -> str: ...
    @staticmethod
    def _is_basic_type(type_hint: Any) -> bool: ...
    @staticmethod
    def _get_basic_type(type_hint: Any) -> str: ...
    @staticmethod
    def _is_container_type(type_hint: Any) -> bool: ...
    @staticmethod
    def _get_container_base_type(type_hint: Any) -> Any: ...
    @staticmethod
    def _get_container_type(type_hint: Any) -> str: ...
    @staticmethod
    def _check_if_valid_dictionary(type_hint: Any) -> None: ...

class VariantUnpacking(object):
    @classmethod
    def _process_variant(cls, variant: Any, *extras: Any) -> Any: ...
    @classmethod
    def _handle_tuple(cls, variant: Any, *extras: Any) -> Any: ...
    @classmethod
    def _handle_dictionary(cls, variant: Any, *extras: Any) -> Any: ...
    @classmethod
    def _handle_array(cls, variant: Any, *extras: Any) -> Any: ...
    @classmethod
    def _handle_variant(cls, variant: Any, *extras: Any) -> Any: ...
    @classmethod
    def _handle_value(cls, variant: Any, *extras: Any) -> Any: ...

class VariantUnpacker(VariantUnpacking):
    @classmethod
    def apply(cls, variant: Any) -> Any: ...

class VariantUnwrapper(VariantUnpacking):
    @classmethod
    def apply(cls, variant: Any) -> Any: ...
    @classmethod
    def _handle_variant(cls, variant: Any, *extras: Any) -> Any: ...
