"""
This type stub file was generated by pyright and updated for dasbus.error.
"""

from abc import ABCMeta, abstractmethod
from typing import Any, Callable

__all__ = [
    "get_error_decorator",
    "DBusError",
    "AbstractErrorRule",
    "ErrorRule",
    "DefaultErrorRule",
    "ErrorMapper",
]

def get_error_decorator(
    error_mapper: "ErrorMapper",
) -> Callable[[str, tuple[Any, ...]], Callable[[type], type]]: ...

class DBusError(Exception):
    """A default DBus error."""

    ...

class AbstractErrorRule(metaclass=ABCMeta):
    """Abstract rule for mapping a Python exception to a DBus error."""

    __slots__ = ()
    @abstractmethod
    def match_type(self, exception_type: type) -> bool: ...
    @abstractmethod
    def get_name(self, exception_type: type) -> str: ...
    @abstractmethod
    def match_name(self, error_name: str) -> bool: ...
    @abstractmethod
    def get_type(self, error_name: str) -> type: ...

class ErrorRule(AbstractErrorRule):
    """Rule for mapping a Python exception to a DBus error."""

    __slots__ = ("_exception_type", "_error_name")
    def __init__(self, exception_type: type, error_name: str) -> None: ...
    def match_type(self, exception_type: type) -> bool: ...
    def get_name(self, exception_type: type) -> str: ...
    def match_name(self, error_name: str) -> bool: ...
    def get_type(self, error_name: str) -> type: ...

class DefaultErrorRule(AbstractErrorRule):
    """Default rule for mapping a Python exception to a DBus error."""

    __slots__ = ("_default_type", "_default_namespace")
    def __init__(
        self, default_type: type, default_namespace: tuple[str, ...]
    ) -> None: ...
    def match_type(self, exception_type: type) -> bool: ...
    def get_name(self, exception_type: type) -> str: ...
    def match_name(self, error_name: str) -> bool: ...
    def get_type(self, error_name: str) -> type: ...

class ErrorMapper(object):
    """Class for mapping Python exceptions to DBus errors."""

    __slots__ = ("_error_rules",)
    def __init__(self) -> None: ...
    def add_rule(self, rule: AbstractErrorRule) -> None: ...
    def reset_rules(self) -> None: ...
    def get_error_name(self, exception_type: type) -> str: ...
    def get_exception_type(self, error_name: str) -> type: ...
