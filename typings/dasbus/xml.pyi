"""
This type stub file was generated by pyright and updated for dasbus.xml.
"""

from typing import Any

__all__ = ["XMLParser", "XMLGenerator"]

class XMLParser:
    """Class for parsing XML."""

    @staticmethod
    def xml_to_element(xml: str) -> Any: ...
    @staticmethod
    def is_member(member_node: Any) -> bool: ...
    @staticmethod
    def is_interface(member_node: Any) -> bool: ...
    @staticmethod
    def is_signal(member_node: Any) -> bool: ...
    @staticmethod
    def is_method(member_node: Any) -> bool: ...
    @staticmethod
    def is_property(member_node: Any) -> bool: ...
    @staticmethod
    def is_parameter(member_node: Any) -> bool: ...
    @staticmethod
    def has_name(node: Any, node_name: str) -> bool: ...
    @staticmethod
    def get_name(node: Any) -> str: ...
    @staticmethod
    def get_type(node: Any) -> str: ...
    @staticmethod
    def get_access(node: Any) -> str: ...
    @staticmethod
    def get_direction(node: Any) -> str: ...
    @staticmethod
    def get_interfaces_from_node(node_element: Any) -> dict[str, Any]: ...

class XMLGenerator(XMLParser):
    """Class for generating XML."""

    @staticmethod
    def element_to_xml(element: Any) -> str: ...
    @staticmethod
    def prettify_xml(xml: str) -> str: ...
    @staticmethod
    def add_child(parent_element: Any, child_element: Any) -> None: ...
    @staticmethod
    def add_comment(element: Any, comment: str) -> None: ...
    @staticmethod
    def create_node() -> Any: ...
    @staticmethod
    def create_interface(name: str) -> Any: ...
    @staticmethod
    def create_signal(name: str) -> Any: ...
    @staticmethod
    def create_method(name: str) -> Any: ...
    @staticmethod
    def create_parameter(name: str, param_type: str, direction: str) -> Any: ...
    @staticmethod
    def create_property(name: str, property_type: str, access: str) -> Any: ...
