"""
This type stub file was generated by pyright and updated for dasbus.client.proxy.
"""

from abc import ABCMeta, abstractmethod
from typing import Any

__all__ = [
    "AbstractObjectProxy",
    "ObjectProxy",
    "InterfaceProxy",
    "get_object_path",
    "disconnect_proxy",
    "get_object_handler",
]

def get_object_handler(proxy: Any) -> Any: ...
def get_object_path(proxy: Any) -> Any: ...
def disconnect_proxy(proxy: Any) -> None: ...

class AbstractObjectProxy(metaclass=ABCMeta):
    """Abstract proxy of a remote DBus object."""

    __slots__ = ["_handler", "_members", "_lock", "__weakref__"]
    _locals: set[str] = ...

    def __init__(
        self,
        message_bus: Any,
        service_name: str,
        object_path: str,
        handler_factory: Any = ...,
        **handler_arguments: Any
    ) -> None: ...
    @abstractmethod
    def _get_interface(self, member_name: str) -> str: ...
    def _get_member(self, *key: Any) -> Any: ...
    def _create_member(self, *key: Any) -> Any: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...

class ObjectProxy(AbstractObjectProxy):
    """Proxy of a remote DBus object."""

    __slots__ = ["_interface_names"]
    _locals: set[str] = ...

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def _get_interface(self, member_name: str) -> str: ...

class InterfaceProxy(AbstractObjectProxy):
    """Proxy of a remote DBus interface."""

    __slots__ = ["_interface_name"]
    _locals: set[str] = ...

    def __init__(
        self,
        message_bus: Any,
        service_name: str,
        object_path: str,
        interface_name: str,
        *args: Any,
        **kwargs: Any
    ) -> None: ...
    def _get_interface(self, member_name: str) -> str: ...
