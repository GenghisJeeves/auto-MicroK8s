"""
This type stub file was generated by pyright and updated for dasbus.client.handler.
"""

from abc import ABCMeta, abstractmethod
from functools import partial
from typing import Any, Callable

__all__ = ["GLibClient", "AbstractClientObjectHandler", "ClientObjectHandler"]

class GLibClient:
    """The low-level DBus client library based on GLib."""

    DBUS_TIMEOUT_NONE: int

    @classmethod
    def sync_call(
        cls,
        connection: Any,
        service_name: str,
        object_path: str,
        interface_name: str,
        method_name: str,
        parameters: Any,
        reply_type: Any,
        flags: int = ...,
        timeout: int = ...,
    ) -> Any: ...
    @classmethod
    def async_call(
        cls,
        connection: Any,
        service_name: str,
        object_path: str,
        interface_name: str,
        method_name: str,
        parameters: Any,
        reply_type: Any,
        callback: Callable[..., None],
        callback_args: tuple[Any, ...] = ...,
        flags: int = ...,
        timeout: int = ...,
    ) -> None: ...
    @classmethod
    def subscribe_signal(
        cls,
        connection: Any,
        service_name: str,
        object_path: str,
        interface_name: str,
        signal_name: str,
        callback: Callable[..., None],
        callback_args: tuple[Any, ...] = ...,
        flags: int = ...,
    ) -> partial[Any]: ...
    @classmethod
    def is_timeout_error(cls, error: Exception) -> bool: ...
    @classmethod
    def is_remote_error(cls, error: Exception) -> bool: ...
    @classmethod
    def get_remote_error_name(cls, error: Exception) -> str: ...
    @classmethod
    def get_remote_error_message(cls, error: Exception) -> str: ...

class AbstractClientObjectHandler(metaclass=ABCMeta):
    """The abstract handler of a remote DBus object."""

    __slots__ = ("_message_bus", "_service_name", "_object_path", "_specification")

    def __init__(
        self, message_bus: Any, service_name: str, object_path: str
    ) -> None: ...
    @property
    def service_name(self) -> str: ...
    @property
    def object_path(self) -> str: ...
    @property
    def specification(self) -> Any: ...
    def create_member(self, interface_name: str, member_name: str) -> Any: ...
    @abstractmethod
    def disconnect_members(self) -> None: ...

class ClientObjectHandler(AbstractClientObjectHandler):
    """The client handler of a DBus object."""

    __slots__ = ("_client", "_signal_factory", "_error_mapper", "_subscriptions")

    def __init__(
        self,
        message_bus: Any,
        service_name: str,
        object_path: str,
        error_mapper: Any = ...,
        client: Any = ...,
        signal_factory: Any = ...,
    ) -> None: ...
    def disconnect_members(self) -> None: ...
